# create_project.py
import os

# Dicion√°rio com os nomes dos arquivos e seus respectivos conte√∫dos
files = {
    "bot.py": r'''import telebot
import requests
import uuid
import base64
import io
import os
import datetime
from flask import Flask, request
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler

# Tokens j√° embutidos (N√ÉO USE ESSA PR√ÅTICA EM PRODU√á√ÉO!)
TELEGRAM_TOKEN = '7776075436:AAFdPlLaseQkmFo7CQNFauhg-Wf8Nzhd1x0'
ACCESS_TOKEN_MP = 'APP_USR-7951666709252852-041313-728c6a5375bb603a60aaefcc56a776c4-583811745'

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# Nome do grupo VIP ‚Äì o bot precisa ser administrador para remover membros
CANAL_VIP = "@stakealtavip"

# Inicia o agendador em background
scheduler = BackgroundScheduler()
scheduler.start()

# Dicion√°rio para armazenar o tipo de assinatura (mensal ou anual) de cada usu√°rio
subscription_info = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    texto = (
        "üíé‚ú® *BEM-VINDO AO STAKE ALTA VIP* ‚ú®üíé\n\n"
        "Voc√™ acaba de entrar no grupo onde dados, estrat√©gia e gest√£o de risco se unem para transformar apostas em decis√µes lucrativas. üìà\n\n"
        "üìä Nosso rob√¥ Cassini utiliza algoritmos preditivos avan√ßados, an√°lise de padr√µes por IA e filtros estat√≠sticos para entregar entradas de alta precis√£o.\n\n"
        "üîê Aqui voc√™ ter√°:\n"
        "- Gest√£o de banca profissional üõ°\n"
        "- Entradas validadas por padr√µes estat√≠sticos üìå\n"
        "- Acompanhamento em tempo real üì≤\n"
        "- Acesso direto ao modelo anal√≠tico do rob√¥ Cassini ü§ñ\n\n"
        "Esse grupo √© para quem joga grande e pensa grande.\n"
        "*Bem-vindo √† elite. Bem-vindo ao STAKE ALTA.* üëëüöÄ"
    )
    teclado = InlineKeyboardMarkup()
    # Bot√µes para escolher o plano
    teclado.add(InlineKeyboardButton("Mensal - R$50", callback_data="50_Mensal"))
    teclado.add(InlineKeyboardButton("Anual - R$300", callback_data="300_Anual"))
    bot.send_message(chat_id, texto, parse_mode='Markdown', reply_markup=teclado)

def gerar_pix_mp(valor, descricao):
    url = 'https://api.mercadopago.com/v1/payments'
    headers = {
        'Authorization': f'Bearer {ACCESS_TOKEN_MP}',
        'Content-Type': 'application/json',
        'X-Idempotency-Key': str(uuid.uuid4())
    }
    payload = {
        "transaction_amount": float(valor),
        "description": descricao,
        "payment_method_id": "pix",
        "payer": {"email": "cliente@email.com"}
    }
    response = requests.post(url, json=payload, headers=headers)
    dados = response.json()
    if "point_of_interaction" in dados:
        tx = dados["point_of_interaction"]["transaction_data"]
        return tx["qr_code_base64"], tx["qr_code"], tx.get("ticket_url", "")
    return None, None, None

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    data = call.data
    if data.startswith("conf_"):
        # Dados quando o usu√°rio confirma o pagamento: "conf_{valor}_{plano}"
        parts = data.split("_", 2)
        if len(parts) == 3:
            _, valor, plano = parts
            subscription_info[call.message.chat.id] = plano.lower()
        solicitar_comprovante(call)
    else:
        # Dados para gerar Pix: "{valor}_{plano}"
        parts = data.split("_", 1)
        if len(parts) == 2:
            valor, plano = parts
            subscription_info[call.message.chat.id] = plano.lower()
            enviar_pix(call.message.chat.id, float(valor), plano)

def enviar_pix(chat_id, valor, descricao):
    qr_base64, copiaecola, ticket_url = gerar_pix_mp(valor, descricao)
    if copiaecola:
        bot.send_message(chat_id, f"‚úÖ *Pix gerado com sucesso!*\n\nC√≥digo copia e cola:\n`{copiaecola}`", parse_mode='Markdown')
        imagem = io.BytesIO(base64.b64decode(qr_base64))
        imagem.name = "qrcode.png"
        bot.send_photo(chat_id, imagem)
        teclado = InlineKeyboardMarkup()
        url_pagamento = ticket_url or f"https://pixbrasil.com.br/pix.html?payload={copiaecola}"
        teclado.add(InlineKeyboardButton("Pagar Pix", url=url_pagamento))
        teclado.add(InlineKeyboardButton("J√° paguei", callback_data=f"conf_{valor}_{descricao}"))
        bot.send_message(chat_id, "Ap√≥s efetuar o pagamento, clique em 'J√° paguei' para enviar o comprovante.", reply_markup=teclado)
    else:
        bot.send_message(chat_id, "Erro ao gerar Pix. Tente novamente.")

def solicitar_comprovante(call):
    bot.send_message(call.message.chat.id, "üìé Envie agora o comprovante de pagamento (imagem ou arquivo):")
    bot.register_next_step_handler(call.message, verificar_pagamento)

def verificar_pagamento(message):
    if message.content_type in ['photo', 'document']:
        bot.send_message(message.chat.id, "‚è≥ Verificando comprovante...")
        # Aqui voc√™ poderia inserir uma verifica√ß√£o real do comprovante
        liberar_link_unico(message.chat.id)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è Por favor, envie o comprovante como imagem ou arquivo.")

def liberar_link_unico(chat_id):
    try:
        # Gera link √∫nico com expira√ß√£o em 10 minutos
        link = bot.create_chat_invite_link(
            chat_id=CANAL_VIP,
            member_limit=1,
            expire_date=int(datetime.datetime.now().timestamp()) + 600
        )
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üöÄ Acessar Canal VIP", url=link.invite_link))
        bot.send_message(chat_id, "‚úÖ Pagamento confirmado! Clique abaixo para entrar no grupo VIP:", reply_markup=markup)
        # Se o plano for mensal, agenda a remo√ß√£o do usu√°rio ap√≥s 31 dias
        if subscription_info.get(chat_id, "") == "mensal":
            run_time = datetime.datetime.now() + datetime.timedelta(days=31)
            scheduler.add_job(remover_usuario, 'date', run_date=run_time, args=[chat_id])
            bot.send_message(chat_id, "‚ÑπÔ∏è Voc√™ ser√° removido do grupo ap√≥s 31 dias se n√£o renovar sua assinatura.")
    except Exception as e:
        bot.send_message(chat_id, f"Erro ao gerar link: {str(e)}")

def remover_usuario(user_id):
    try:
        bot.kick_chat_member(CANAL_VIP, user_id)
        bot.send_message(user_id, "Sua assinatura mensal expirou e voc√™ foi removido do grupo. Para reentrar, realize um novo pagamento.")
    except Exception as e:
        bot.send_message(user_id, f"Erro ao remover voc√™ do grupo: {str(e)}")

@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "Webhook recebido", 200

@app.route("/", methods=["GET"])
def home():
    return "Bot Stake VIP Online!"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://aposta-vip-bot-web.onrender.com/webhook/{TELEGRAM_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
''',
    "requirements.txt": r'''flask
pytelegrambotapi
python-dotenv
requests
apscheduler
''',
    "Procfile": r'''web: python bot.py
''',
    ".env.example": r'''TELEGRAM_TOKEN=7776075436:AAFdPlLaseQkmFo7CQNFauhg-Wf8Nzhd1x0
ACCESS_TOKEN_MP=APP_USR-7951666709252852-041313-728c6a5375bb603a60aaefcc56a776c4-583811745
''',
    "README.md": r'''# Bot Stake Alta VIP

Este projeto √© um bot para o grupo VIP do Stake Alta. Ele integra:

- Mensagem de boas-vindas com explica√ß√£o do servi√ßo.
- Gera√ß√£o de Pix para pagamento, com op√ß√£o de c√≥digo "copia e cola" e QR Code.
- Confirma√ß√£o de pagamento e envio de link √∫nico (com expira√ß√£o) para acesso ao grupo VIP.
- Remo√ß√£o autom√°tica do usu√°rio do grupo ap√≥s 31 dias (para assinaturas mensais), se n√£o renovar.

## Arquivos

- **bot.py**: C√≥digo principal do bot.
- **requirements.txt**: Depend√™ncias do projeto.
- **Procfile**: Configura√ß√£o para deploy no Render.
- **.env.example**: Exemplo de vari√°veis de ambiente.
- **README.md**: Documenta√ß√£o do projeto.

## Deploy

1. Crie um reposit√≥rio no GitHub e fa√ßa o upload destes arquivos.
2. Conecte o reposit√≥rio √† Render e configure um Web Service com o comando `python bot.py`.
3. Como os tokens j√° est√£o embutidos no c√≥digo, n√£o √© necess√°rio configurar vari√°veis de ambiente (mas recomendamos utilizar vari√°veis de ambiente para maior seguran√ßa em produ√ß√£o).
4. Ap√≥s o deploy, configure o webhook do Telegram com o comando:
